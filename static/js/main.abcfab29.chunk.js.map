{"version":3,"sources":["components/Counter.jsx","components/ListOfCounters.jsx","components/Reset.jsx","components/Nav.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","props","className","displayStyle","badgeDisplay","type","onClick","Increment","id","decrement","disabled","Value","delete","ListOfCounters","display","CountData","map","item","value","key","Delete","Decrement","Reset","Nav","numActCounters","App","onIncrement","counterId","Count","state","setState","onDelete","filter","onDecrement","reset","role","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.abcfab29.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Counter = (props) => {\r\n  return (\r\n    <div className=\"container m-2 w-50\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-2\">\r\n          <span className={`${props.displayStyle}`}>{props.badgeDisplay}</span>\r\n        </div>\r\n        <div className=\"col-sm-2\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={() => props.Increment(props.id)}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n        <div className=\"col-sm-2\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={() => props.decrement(props.id)}\r\n            disabled={!props.Value}\r\n          >\r\n            -\r\n          </button>\r\n        </div>\r\n        <div className=\"col-sm-2\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger\"\r\n            onClick={() => props.delete(props.id)}\r\n          >\r\n            x\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport Counter from \"./Counter\";\r\n\r\nconst ListOfCounters = (props) => {\r\n  const display = \"badge badge-pill badge-\";\r\n  let displayCustom = \"\";\r\n  return props.CountData.map((item) =>\r\n    item.value === 0 ? (\r\n      <Counter\r\n        key={item.id}\r\n        Value={item.value}\r\n        displayStyle={(displayCustom = display + \"warning\")}\r\n        Increment={props.Increment}\r\n        id={item.id}\r\n        delete={props.Delete}\r\n        decrement={props.Decrement}\r\n        badgeDisplay={\"Zero\"}\r\n      />\r\n    ) : (\r\n      <Counter\r\n        key={item.id}\r\n        Value={item.value}\r\n        displayStyle={(displayCustom = display + \"primary\")}\r\n        id={item.id}\r\n        Increment={props.Increment}\r\n        delete={props.Delete}\r\n        decrement={props.Decrement}\r\n        badgeDisplay={item.value}\r\n      />\r\n    )\r\n  );\r\n};\r\n\r\nexport default ListOfCounters;\r\n","import React from \"react\";\r\n\r\nconst Reset = (props) => {\r\n  return (\r\n    <button type=\"button\" className=\"btn btn-primary m-5\" onClick={props.Reset}>\r\n      Reset\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Reset;\r\n","import React from \"react\";\r\n\r\nconst Nav = (props) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <span className=\"navbar-brand mb-0 h1\">Navbar</span>\r\n      <span className=\"badge badge-pill badge-dark\">{`${props.numActCounters}`}</span>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ListOfCounters from \"./components/ListOfCounters\";\nimport Reset from \"./components/Reset\";\nimport Nav from \"./components/Nav\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Count: [\n        { id: 0, value: 0 },\n        { id: 1, value: 0 },\n        { id: 2, value: 0 },\n        { id: 3, value: 0 },\n      ],\n    };\n  }\n  render() {\n    return (\n      <main role=\"main\" className=\"container\">\n        <Nav\n          numActCounters={\n            this.state.Count.filter((item) => item.value > 0).length\n          }\n        />\n        <Reset Reset={this.reset} />\n        <ListOfCounters\n          CountData={this.state.Count}\n          Increment={this.onIncrement}\n          Delete={this.onDelete}\n          Decrement={this.onDecrement}\n        />\n      </main>\n    );\n  }\n  onIncrement = (counterId) => {\n    const Count = this.state.Count.map((item) => {\n      if (item.id === counterId) item.value++;\n      return item;\n    });\n    this.setState({ Count });\n  };\n  onDelete = (counterId) => {\n    const Count = this.state.Count.filter((item) => item.id !== counterId);\n    this.setState({ Count });\n  };\n  onDecrement = (counterId) => {\n    const Count = this.state.Count.map((item) => {\n      if (item.id === counterId && item.value !== 0) item.value--;\n      return item;\n    });\n    this.setState({ Count });\n  };\n  reset = () => {\n    const Count = this.state.Count.map((item) => {\n      item.value = 0;\n      return item;\n    });\n    this.setState({ Count });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport bootstrap from \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}